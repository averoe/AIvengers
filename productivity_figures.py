# -*- coding: utf-8 -*-
"""Productivity_Figures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RcKj3qnC9eWtGjh5SypFnawRY4AXYHbx
"""

#importing libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Load the updated datasets
employees_df = pd.read_csv('updated_employees.csv')
tasks_df = pd.read_csv('updated_tasks.csv')
team_task_df = pd.read_csv('updated_team_task_dataset.csv')

# Set the style for seaborn
sns.set(style="whitegrid")

# 2. Task Analysis
# Pie chart showing task status (Completed, In Progress, Delayed)
task_status_counts = tasks_df['Delays (Days)'].apply(lambda x: 'Delayed' if x > 0 else 'On Time').value_counts()
plt.figure(figsize=(8, 8))
task_status_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['lightcoral', 'lightskyblue'])
plt.title('Task Status Distribution', fontsize=16)
plt.ylabel('')
plt.tight_layout()
plt.show()

# Ensure task_end_time and task_start_time are in datetime format
tasks_df['task_end_time'] = pd.to_datetime(tasks_df['task_end_time'])
tasks_df['task_start_time'] = pd.to_datetime(tasks_df['task_start_time'])

# Calculate Completion Time (Hours) and Delays (Days)
tasks_df['Completion Time (Hours)'] = (tasks_df['task_end_time'] - tasks_df['task_start_time']).dt.total_seconds() / 3600
tasks_df['Delays (Days)'] = (pd.to_datetime('2025-01-25') - tasks_df['task_end_time']).dt.days

# Scatter plot comparing task priority vs. time taken for completion
plt.figure(figsize=(12, 6))
sns.scatterplot(data=tasks_df, x='Delays (Days)', y='Completion Time (Hours)', hue='Task Priority', style='Task Priority', s=100, palette='deep')
plt.title('Task Priority vs. Time Taken for Completion', fontsize=16)
plt.xlabel('Delays (Days)', fontsize=14)
plt.ylabel('Completion Time (Hours)', fontsize=14)
plt.legend(title='Task Priority')
plt.grid(True)
plt.tight_layout()
plt.show()

workload_distribution = team_task_df.groupby('member_id')['Team Productivity Score'].sum().reset_index()

# Create a heatmap using Plotly
fig = px.density_heatmap(
    workload_distribution,
    x='member_id',
    y='Team Productivity Score',
    color_continuous_scale='YlGnBu',
    title='Workload Distribution Across Team Members'
)

fig.update_layout(
    xaxis_title='Team Member ID',
    yaxis_title='Productivity Score',
    coloraxis_colorbar=dict(title='Productivity Score'),
    template='plotly_white'
)

fig.show()

utilization_data = employees_df[['Name', 'Skills Utilization (%)']]

# Check if 'Skills Utilization (%)' has zero values and handle them
# Option 1: Replace zero values with a small positive value
utilization_data['Skills Utilization (%)'] = utilization_data['Skills Utilization (%)'].replace(0, 0.0001)

# Option 2: Filter out rows with zero values
# utilization_data = utilization_data[utilization_data['Skills Utilization (%)'] != 0]

# Create a sunburst chart
fig = px.sunburst(
    utilization_data,
    path=['Name'],  # Use 'Name' as the path for categories
    values='Skills Utilization (%)',
    color='Skills Utilization (%)',
    color_continuous_scale='blues',
    title='Skill Utilization Among Team Members'
)

fig.update_layout(
    template='plotly_white',
    title_font=dict(size=20, family='Arial')
)

fig.show()

# 4. Meeting Insights
# Line chart tracking meeting hours vs. productivity over time
meeting_hours = employees_df['Meeting Hours Logged']
productivity_ratings = employees_df['Productivity Rating']

plt.figure(figsize=(12, 6))
sns.lineplot(data=employees_df[['Meeting Hours Logged', 'Productivity Rating']], dashes=False)
plt.title('Meeting Hours vs. Productivity Over Time', fontsize=16)
plt.xlabel('Employee Index', fontsize=14)
plt.ylabel('Hours / Ratings', fontsize=14)
plt.legend(['Meeting Hours Logged', 'Productivity Rating'])
plt.grid(True)
plt.tight_layout()
plt.show()

# Histogram of communication overhead per team
communication_overhead_data = team_task_df['Communication Overhead (Hours)'].dropna()

plt.figure(figsize=(12, 6))
sns.histplot(communication_overhead_data, bins=10, kde=True, color='purple')
plt.title('Communication Overhead per Team', fontsize=16)
plt.xlabel('Communication Overhead (Hours)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.tight_layout()
plt.show()



# Assuming 'employees_df' is already loaded
sorted_employees_df = employees_df.sort_values(by='Productivity Rating', ascending=False)

fig = px.bar(
    sorted_employees_df,
    x='Name',
    y='Productivity Rating',
    color='Productivity Rating',
    color_continuous_scale='viridis',
    title='Employee Productivity Ratings'
)

fig.update_layout(
    xaxis_title='Employee Name',
    yaxis_title='Productivity Rating',
    xaxis=dict(tickangle=-90),
    template='plotly_white'
)

fig.show()

