# -*- coding: utf-8 -*-
"""Task_Reassignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GNFER31IiAtLAZKqROHINkfpCrKmb3n
"""

import pandas as pd
import numpy as np

# Function to handle missing values
def handle_missing_values(df, columns_defaults):
    for col, default in columns_defaults.items():
        if callable(default):
            if isinstance(df[col].iloc[0], list):  # Check if the column contains lists
                # Check if the list is empty or NaN using pd.isna() and all/any for lists
                df[col] = df[col].apply(lambda x: default() if (isinstance(x, float) and pd.isna(x)) or (isinstance(x, list) and (not x or any(pd.isna(i) for i in x))) else x)
            else:
                df[col] = df[col].fillna(default)  # Avoid inplace=True to avoid FutureWarning
        else:
            df[col] = df[col].fillna(default)  # Avoid inplace=True to avoid FutureWarning
    return df

# Function to safely convert strings to lists
def safely_convert_to_list(column):
    return column.apply(
        lambda x: eval(x) if isinstance(x, str) and x.strip().startswith('[') else x
    )

# Function to recommend employees or teams for task reassignment
def recommend_employees_for_task(task, employees, num_members):
    # Filter employees who have all required skills and low workload
    eligible_employees = employees[employees['Skill Set'].apply(
        lambda skills: all(skill in skills for skill in task['Required Skills'])
    )]
    eligible_employees = eligible_employees[eligible_employees['Current Workload'] < 3]

    # Sort eligible employees by performance score (high to low) and workload (low to high)
    eligible_employees = eligible_employees.sort_values(
        by=['Performance Score', 'Current Workload'], ascending=[False, True]
    )

    # Select the top `num_members` employees
    return eligible_employees.head(num_members)

# Task reassignment logic
def reassign_task(tasks, employees):
    reassignment_results = []
    for _, task in tasks.iterrows():
        num_members = task['Number of Members']
        recommended_employees = recommend_employees_for_task(task, employees, num_members)

        if not recommended_employees.empty:
            reassignment_results.append({
                "Task Number": task['Task Number'],
                "Reassigned Team": [
                    f"{emp['Name']} (ID: {emp['Employee ID']})"
                    for _, emp in recommended_employees.iterrows()
                ]
            })
        else:
            reassignment_results.append({
                "Task Number": task['Task Number'],
                "Reassigned Team": "No suitable employees found"
            })

    return reassignment_results

if __name__ == "__main__":
    # Load datasets
    employees = pd.read_csv("employees.csv")
    tasks = pd.read_csv("tasks.csv")

    # Safely convert 'Skill Set' and 'Required Skills' from string to list
    employees['Skill Set'] = safely_convert_to_list(employees['Skill Set'])
    tasks['Required Skills'] = safely_convert_to_list(tasks['Required Skills'])

    # Handle missing values
    employees = handle_missing_values(employees, {
        'Skill Set': lambda: ['General'],
        'Performance Score': 5.0,
        'Current Workload': 2
    })

    # Reassign tasks and display results
    results = reassign_task(tasks, employees)
    for result in results:
        if isinstance(result['Reassigned Team'], list):
            print(f"Task {result['Task Number']} reassigned to:")
            for member in result['Reassigned Team']:
                print(f"  - {member}")
        else:
            print(f"Task {result['Task Number']} could not be reassigned. {result['Reassigned Team']}")

